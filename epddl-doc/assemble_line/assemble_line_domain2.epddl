(define (domain assemble_line2)
  (:types agent)
  (:predicates
  )

  (:action processA
   :category (sensing)
   :parameters ()
   :precondition (and (not (K_a (qulifiedA))) (not (K_a(not (qulifiedA)))) )          
   :observe_pos (and (qulifiedA) (K_a(qulifiedA)) )
   :observe_neg (and (not (qulifiedA)) (K_a (not (qulifiedA))))
  )
  
  (:action processB
   :category (sensing)
   :parameters ()
   :precondition (and (not (K_b (qulifiedB))) (not (K_b(not (qulifiedB)))) )  
   :observe_pos (and (qulifiedB) (K_b(qulifiedB)) )
   :observe_neg (and (not (qulifiedB)) (K_b (not (qulifiedB))))
  )

  (:action tell_alpha
   :category (communication)
   :parameters ()
   :precondition (or (K_b (qulifiedB)) (K_b(not (qulifiedB))))
   :effect (<{K_b (qulifiedB)}
             {and (K_a(qulifiedB)) (K_b(K_a(qulifiedB)))}>
            <{K_b (not (qulifiedB))}
             {and (K_a(K_b(not (qulifiedB)))) (K_b(K_a(not(qulifiedB))))}>
           )
  )
  
  (:action tell_beta
   :category (communication)
   :parameters ()
   :precondition (or (K_a (qulifiedA)) (K_a(not (qulifiedA))))
   :effect (<{K_a (qulifiedA)}
             {and (K_b(qulifiedA)) (K_a(K_b(qulifiedA)))}>
            <{K_a (not (qulifiedA))}
             {and (K_b(K_a(not (qulifiedA)))) (K_a(K_b(not(qulifiedA))))}>
           )
  )
  
  (:action assemble
   :category (ontic)
   :parameters ()
   :precondition (and (K_a (K_b (qulifiedA))) (K_b (K_a (qulifiedB))))
   :effect (<{True}
             {assemble}>
           )
  )
  
  (:action restart
   :category (ontic)
   :parameters ()
   :precondition (or (K_a (K_b (not (qulifiedA)))) (K_b (K_a (not (qulifiedB)))) )
   :effect (<{True}
             {restart}>
           )
  )
  
)
